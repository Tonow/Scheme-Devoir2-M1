#lang scheme

(require "for-hw-2.scm")


;;;;;;;;;;;;
;; 1 INTRADA
;;;;;;;;;;;;

;;retourne #t si l’année year est bissextile, #f sinon
;;est bissextile :
;;                si elle est divisible par 4 et pas par 100
;;                ou si elle est divisible par 400
;; argument : year -> entier
(define (leap? year)
  (cond ((and (eq? 0 (modulo year 100)) (not (eq? 0 (modulo year 400)))) #f)
        ((eq? 0 (modulo year 400)) #t)
        ((eq? 0 (modulo year 4)) #t)
        (else #f)
        )
  )

;;;;;;;;;;;;;;;;;;
;; 2 PREIMERE SERIE
;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; 2.1 Programmation de streams
;;;;;;;;;;;;

;;2.1.1 Définir la variable beat-5 dont la valeur est le stream infini composé des éléments suivants
;;
;;#t #f #t #f #f #t #f #t #f #f #t #f ... (la périodicité de 5 en 5)
;;
(define beat-5
(cons #t (delay (cons #f (delay (cons #t (delay (cons #f (delay (cons #f (delay beat-5)))))))))))


;;2.1.2 Comparaison des deux fonctions (make-constant-stream x)
(define (make-constant-stream-v0 x)
  (cons x (delay (make-constant-stream-v0 x))))

(define (make-constant-stream-v1 x)
  (letrec ((this (cons x (delay this))))
    this))

;; Je dirais que:
;;               -la fonction v0 doit prendre moins de place memoire.
;;               -la fonction V1 doit etre plus rapide puisqu'on a pas besoin de rapeller la fonction a chaque iteration.



;;2.1.3 Définir la variable switch dont la valeur est le stream composé des éléments suivants :
;;
;;#t #f #t #f #t #f ...
;;

(define swich
  (cons #t(delay (cons #f (delay swich)))))


;;2.1.4 Étant donné un entier naturel n, donner la fonction stay-at-false, telle que l’évaluation
;;de l’expression (stay-at-false n) retourne un stream dont les éléments sont composés comme suit:
;;
;;#t #f | . {z .. n éléments #f } #t #f | . {z .. n éléments #f } ...

;; Fonction qui permet de repeté dans un stream #f n-fois puis qui renvois dans la fonction stay-at-false une fois finis
(define (number-of-false n)
  (if (zero? n) (stay-at-false n) (cons #f (delay (number-of-false (- n 1)))))
  )

;; Fonction en elle meme qui fait apelle a number-of-false
(define (stay-at-false n)
  (cons #t (delay (number-of-false n) ))
  )



;;2.1.5 Soient a et b deux données quelconques, et soient n a et n b deux entiers naturels, définir
;;la fonction two-elements, telle que l’évaluation de l’expression (two-elements a b n a n b ) retourne le stream suivant :
;;
;;a . . a } | . {z n a éléments b . . b } | . {z n b éléments a | . {z . . a } n a éléments b . . b } | . {z n b éléments ...

;; XXX NE FONCTIONE PAS !!!


;; stream composer de na valeur de a
(define (number-of-A a b na nb)
  (let ((naa na));;Sauvegarde de la valeur
    (set! naa na) ;test pour que ca fonctionne
    (set! na (- na 1));;Parce que a est deja afficher une fois
    (if (zero? na) (number-of-B a b naa nb ) (cons a (delay (number-of-A a b (- na 1) nb))))
  ))

;; stream composer de na valeur de a
(define (number-of-A-bis a b na nb)
  (let ((naa na));;Sauvegarde de la valeur
    (set! naa na) ;test pour que ca fonctionne
    (if (zero? na) (number-of-B a b naa nb ) (cons a (delay (number-of-A a b (- na 1) nb))))
  ))

;; stream composer de nb valeur b
(define (number-of-B a b na nb)
  (let ((nbb nb));;Sauvegarde de la valeur
    (set! nbb nb) ;test pour que ca fonctionne
    (if (zero? nb)  (number-of-A-bis a b na nbb ) (cons b (delay (number-of-B a b na (- nb 1)))))
  ))

;; lancement du stream avec la premiere valeur de a 
(define (two-elements a b na nb )
  (cons a (delay (number-of-A a b na nb)))
  )

;; test:
;; (head (tail (tail (tail (tail (tail (two-elements 'a 'b 1 1 )))))))

;; XXX NE FONCTIONE PAS !!!


;;;;;;;;;;;;
;; 2.2 D’autres opérations sur les streams
;;;;;;;;;;;;

;;2.2.1 Soient n un entier naturel et s un stream, donner la fonction truncate-stream, telle que l’évaluation
;; de l’expression (truncate-stream s n) retourne un stream fini composé des n premiers
;; éléments de s. Si s est fini et possède m éléments avec m < n, le résultat est un stream fini composé uniquement des m éléments de s.

(define (truncate-stream s n )
  (cond  ((zero? n) '())
         ((end-of-stream? s)
         (display "** End of this stream! **"))
        (else (write (head s))
         (truncate-stream (tail s) (- n 1))))
  )

;; XXX affiche a la fin une liste vide